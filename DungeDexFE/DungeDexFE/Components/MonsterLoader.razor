@rendermode InteractiveAuto

@using System.Text.Json;

@if(monster != null)
{
    <MonsterDisplay Monster="@monster" />
}

@code {
    [Parameter]
    public string idOrName { get; set; } = null!;

    public Monster monster { get; set; } = null!;

    protected override async Task OnParametersSetAsync()
    {
        monster = await GetMonster(idOrName);
    }

    public static async Task<Monster> GetMonster(string idOrName)
    {
        var http = new HttpClient();
        var response = await http.GetFromJsonAsync<Monster>($"https://localhost:7298/api/Pokemon/{idOrName}/monsterify");
        return response;
        // var file = File.ReadAllText(".\\BareBonesMonster.json");
        // return JsonSerializer.Deserialize<Monster>(file);
    }

    public static List<Monster> GetUserMonsters(string name)
    {
        var file = File.ReadAllText(".\\BareBonesMonsters.json");
        return JsonSerializer.Deserialize<List<Monster>>(file);
    }
}
<!--
This component will load the data from the Monster Json file?
When this is called it should be called with This monster object = backend search with this {data}

Needs to intialise an object
Monster object changes depending on how we get there
Outputing an object when asked
IF already exist search our own db for it
IF NOT then 

on intial make a monster obj given the parameters 

which db you search depends on the parameters


-->
