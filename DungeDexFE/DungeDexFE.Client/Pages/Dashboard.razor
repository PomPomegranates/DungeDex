@page "/dashboard"

@rendermode @(new InteractiveWebAssemblyRenderMode(false))

@inject AuthStateProvider Auth
@inject NavigationManager Nav
@inject IHttpClientFactory ClientFactory

<PageTitle>DungéDex : Dashboard</PageTitle>

<h3>DungéDashboard</h3>

<div class="my-4">

	@if (_user is null)
	{

		<p class="text-danger">You must be logged in to view your dashboard.</p>
		<p class="my-4"><a href="/login">Click here</a> to login or sign-up.</p>

	}
	else
	{

		@if (string.IsNullOrEmpty(_errorMessage))
		{

			<UserDisplay user="@_user" />

		}
		else
		{

			<p>@_errorMessage</p>

		}

	}
</div>

@code
{
	private string? _errorMessage = null;

	private User? _user = null!;

	protected override async Task OnInitializedAsync()
	{
		var username = Auth.GetUserName();

		if (string.IsNullOrEmpty(username))
		{
			_errorMessage = "You must be logged in to view your dashboard.";
			return;
		}

		try
		{
			using var client = ClientFactory.CreateClient("BackendAPI");
			var result = await client.GetAsync($"users/{username}");
			result.EnsureSuccessStatusCode();
			_user = await result.Content.ReadFromJsonAsync<User>();
		}
		catch (Exception ex)
		{
			_errorMessage = ex.Message;
		}
	}
}