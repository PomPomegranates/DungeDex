@using DungeDexFE.Client.Models
@rendermode InteractiveServer
@inject NavigationManager nav
@page "/dungemon/{Id:int}"

<PageTitle>DungéDex : Find</PageTitle>

@if (errorMessage != null)
{
	<p>@errorMessage</p>
}
else if (PublishedDungemon != null)
{
	<h3>@PublishedDungemon.NickName</h3>
	<DungemonDisplay Dungemon=PublishedDungemon DungemonChanged="DungemonChanged"/>
	<div id="DeleteDungemon">
		<button @onclick="DeleteDungemonCheck">🗑️</button>
		<p>@areYouSure</p>
		<button hidden="@deleteButtonsHidden" @onclick="DeleteDungemon">Yes</button>
		<button hidden="@deleteButtonsHidden" @onclick="Rehide">No</button>
	</div>
}

@code {
	[Parameter]
	public int Id { get; set; }

	public Dungemon PublishedDungemon { get; set; } = null!;

	private string errorMessage { get; set; } = null!;

	private string areYouSure = string.Empty;

	private bool deleteButtonsHidden = true;



	protected override async Task OnParametersSetAsync()
	{
		try
		{
			using var client = new HttpClient();
			var response = await client.GetAsync($"https://localhost:7298/api/UserDungemon/{Id}");
			response.EnsureSuccessStatusCode();
			PublishedDungemon = await response.Content.ReadFromJsonAsync<Dungemon>() ?? throw new Exception();
		}
		catch (HttpRequestException hEx)
		{
			errorMessage = $"There was an issue retrieving data from the Database: {hEx.Message}";
		}
		catch (Exception ex)
		{
			errorMessage = $"There was an issue fetching the Dungémon data: {ex.Message}";
		}
	}

	private async Task DungemonChanged(Dungemon updatedDungemon)
	{
		PublishedDungemon = updatedDungemon;
		// Make a patch request
	}

	private void DeleteDungemonCheck()
	{
		areYouSure = "Are you sure?";
		deleteButtonsHidden = false;
	}
	private void Rehide()
	{
		areYouSure = string.Empty;
		deleteButtonsHidden = true;
	}
	private async Task DeleteDungemon(MouseEventArgs e)
	{
		try
		{
			using var client = new HttpClient();
			var response = await client.DeleteAsync($"https://localhost:7298/api/UserDungeMon?dungemonId={Id}");
			response.EnsureSuccessStatusCode();
			areYouSure = "Dungémon deleted.";
			await Task.Delay(1000);
			nav.NavigateTo("/");
		}
		catch (HttpRequestException hEx)
		{
			errorMessage = $"There was an issue retrieving data from the Database: {hEx.Message}";
		}
		catch (Exception ex)
		{
			errorMessage = $"There was an issue fetching the Dungémon data: {ex.Message}";
		}
	}
}
