@page "/dungemon/{Id:int}"
@rendermode @(new InteractiveWebAssemblyRenderMode(false))

@using System.Security.Claims
@using System.Net

@inject IHttpClientFactory clientFactory
@inject AuthStateProvider auth
@inject NavigationManager nav

<PageTitle>DungéDex : Find</PageTitle>

@if (errorMessage is not null)
{
	<p>@errorMessage</p>
}

@if (Dungemon is not null)
{
	<h3>@Dungemon.NickName</h3>

	<DungemonDisplay Dungemon=Dungemon DungemonChanged="DungemonChanged" />

	<div hidden="@(!dungemonBelongsToUser)" id="DeleteDungemon">

		<button @onclick="ToggleDelete">
			<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
				<path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0z" />
				<path d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4zM2.5 3h11V2h-11z" />
			</svg>
		</button>

		@if (!string.IsNullOrEmpty(confirmDeleteMessage))
		{
			<p>@confirmDeleteMessage</p>
		}

		@if (!deleteButtonsHidden)
		{
			<button @onclick="DeleteDungemon">Yes</button>
			<button @onclick="ToggleDelete">No</button>
		}

	</div>

	@if (string.IsNullOrEmpty(userId) || !dungemonBelongsToUser)
	{
		<div hidden="@(string.IsNullOrEmpty(userId) || dungemonBelongsToUser)" id="ForkDungemon">

			<button @onclick="HandleForkRequest">
				<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-copy" viewBox="0 0 16 16">
					<path fill-rule="evenodd" d="M4 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2zm2-1a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1zM2 5a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1v-1h1v1a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h1v1z" />
				</svg> Clone This Dungémon!
			</button>

		</div>
	}
}

@code {
	[Parameter]
	public int Id { get; set; }

	private string? userId { get; set; } = null;

	public Dungemon Dungemon { get; set; } = null!;

	private string errorMessage { get; set; } = null!;

	private bool dungemonBelongsToUser = false;

	private string confirmDeleteMessage = null!;

	private bool deleteButtonsHidden = true;

	protected override async Task OnParametersSetAsync()
	{
		userId = auth.GetUserId();

		try
		{
			using var client = clientFactory.CreateClient("BackendAPI");
			var response = await client.GetAsync($"dungemon/{Id}");
			response.EnsureSuccessStatusCode();
			Dungemon = await response.Content.ReadFromJsonAsync<Dungemon>() ?? throw new Exception();
			dungemonBelongsToUser = userId == Dungemon.UserId;
		}
		catch (Exception ex)
		{
			errorMessage = $"There was an issue retrieving data from the Database: {ex.Message}";
		}
	}

	private async Task DungemonChanged(Dungemon updatedDungemon)
	{
		await HandlePatchRequest(updatedDungemon);
	}

	private async Task HandlePatchRequest(Dungemon? dungemon = null)
	{
		if (dungemon is null) dungemon = Dungemon;

		try
		{
			using var client = clientFactory.CreateClient("BackendAPI");
			var response = await client.PatchAsJsonAsync<Dungemon>("dungemon", dungemon);
			response.EnsureSuccessStatusCode();
			var patchedDungemon = await response.Content.ReadFromJsonAsync<Dungemon>();

			if (patchedDungemon == null)
			{
				errorMessage = "There was an error updating the Dungémon.";
				return;
			}

			Dungemon = patchedDungemon;
		}
		catch (HttpRequestException hex)
		{
			if (hex.StatusCode == HttpStatusCode.Unauthorized) errorMessage = "You must be signed-in to publish Dungémon.";

			else errorMessage = hex.Message;
		}
		catch (Exception ex)
		{
			errorMessage = ex.Message;
		}
	}

	private void ToggleDelete()
	{
		confirmDeleteMessage = string.IsNullOrEmpty(confirmDeleteMessage)
			? "Are you sure?"
			: string.Empty;
		deleteButtonsHidden = !deleteButtonsHidden;
	}

	private async Task DeleteDungemon(MouseEventArgs e)
	{
		try
		{
			using var client = clientFactory.CreateClient("BackendAPI");
			var response = await client.DeleteAsync($"dungemon/{Id}");
			response.EnsureSuccessStatusCode();
			confirmDeleteMessage = "Dungémon deleted. Redirecting to your DungéDashboard";
			await Task.Delay(3000);
			nav.NavigateTo("/dashboard");
		}
		catch (HttpRequestException hEx)
		{
			errorMessage = $"There was an issue retrieving data from the Database: {hEx.Message}";
		}
		catch (Exception ex)
		{
			errorMessage = $"There was an issue fetching the Dungémon data: {ex.Message}";
		}
	}

	private async Task HandleForkRequest(MouseEventArgs e)
	{
		var clone = CloneDungemon();

		using var client = clientFactory.CreateClient("BackendAPI");
		var result = await client.PostAsJsonAsync("dungemon", clone);
		if (!result.IsSuccessStatusCode)
		{
			errorMessage = "There was an error attempting to clone the Dungémon. Please try again later.";
			return;
		}

		var dungemonResponse = await result.Content.ReadFromJsonAsync<Dungemon>();
		if (dungemonResponse is null)
		{
			errorMessage = "There was an error reading the API response. Please try again later.";
			return;
		}

		clone = CopyOriginalAttributes(dungemonResponse);
		var patchResponse = await client.PatchAsJsonAsync("dungemon", dungemonResponse);
		if (!patchResponse.IsSuccessStatusCode)
		{
			errorMessage = "There was an error cloning properties to the new Dungémon. Please try again later.";
			return;
		}

		var updatedDungemon = await patchResponse.Content.ReadFromJsonAsync<Dungemon>();
		if (updatedDungemon is null)
		{
			errorMessage = "There was an error cloning properties to the new Dungémon. Please try again later.";
			return;
		}

		nav.NavigateTo($"dungemon/{updatedDungemon?.Id}", false);
	}

	private Dungemon CloneDungemon()
	{
		var dungemon = Dungemon.Clone();
		dungemon.UserId = userId;
		return dungemon;
	}

	private Dungemon CopyOriginalAttributes(Dungemon dungemon)
	{
		dungemon.Spells = Dungemon.Spells.Select(s => s.Clone(dungemon.Id)).ToList();
		dungemon.Actions = Dungemon.Actions.Select(a => a.Clone(dungemon.Id)).ToList();
		return dungemon;
	}
}
