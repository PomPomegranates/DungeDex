@page "/dungemon"

@rendermode @(new InteractiveWebAssemblyRenderMode(false))

@inject IHttpClientFactory clientFactory
@inject NavigationManager Nav

<PageTitle>DungéDex : Browse</PageTitle>

<h3>Browse Dungémon</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
	<p>@errorMessage</p>
}
else if (allDungemon != null)
{
	<div id="FilterBar" class="py-4">
		<EditForm Model="filter">
			<InputText @bind-Value="filter.PokeFilter" placeholder="Base Pokémon" />
			<button type="submit" @onclick="PopulateTable">Filter</button>
			<button hidden="@(string.IsNullOrEmpty(filter.PokeFilter))" @onclick="ClearFilter">❌</button>
		</EditForm>
	</div>

	<DungemonTable dungemonList="allDungemon" />

	<div style="width: 100%; display: flex; justify-content: space-between">

		<div>
			<button hidden="@(filter.Offset <= 0)" @onclick="() => filter.TurnPage(-1)">⬅️ Previous</button>
		</div>

		<div>
			<button hidden="@(allDungemon.Count <= 20)" @onclick="() => filter.TurnPage(1)">Next ➡️</button>
		</div>

	</div>

}

@code {
	public List<Dungemon> allDungemon { get; set; } = null!;

	public FilterModel filter { get; set; } = new();

	private string errorMessage { get; set; } = null!;

	protected override async Task OnInitializedAsync()
	{
		await PopulateTable();
	}

	private async Task ClearFilter()
	{
		filter.Reset();
		await PopulateTable();
	}

	private async Task PopulateTable()
	{
		var queryString = filter.GetQueryString();

		try
		{
			using var client = clientFactory.CreateClient("BackendAPI");
			allDungemon = await client.GetFromJsonAsync<List<Dungemon>>($"dungemon{queryString}")
				?? throw new Exception("Unable to convert the server response into Dungémon.");
		}
		catch (HttpRequestException ex)
		{
			errorMessage = ex.Message;
		}
		catch (Exception ex)
		{
			errorMessage = "An error occurred while fetching the Dungémon data: " + ex.Message;
		}
	}

	private async Task TurnPage(int value)
	{
		if ((value == -1 && filter.Offset <= 0) || (value == 1 && allDungemon.Count < 20)) return;
		filter.TurnPage(value);
		await PopulateTable();
	}

	public class FilterModel
	{
		public string? PokeFilter { get; set; } = null!;
		public int Offset { get; set; } = 0;
		public int Number { get; set; } = 20;

		public string GetQueryString()
		{
			return string.IsNullOrEmpty(PokeFilter)
				? $"?number={Number}&offset={Offset}"
				: $"?number={Number}&offset={Offset}&basePokemon={PokeFilter}";
		}

		public void Reset()
		{
			PokeFilter = null;
		}

		public void TurnPage(int value)
		{
			Offset += value * 20;
		}
	}
}
