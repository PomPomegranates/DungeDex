@page "/dungemon"

@rendermode @(new InteractiveWebAssemblyRenderMode(false))

@inject IHttpClientFactory clientFactory
@inject NavigationManager Nav

<PageTitle>DungéDex : Browse</PageTitle>

<h3>Browse Dungémon</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
	<p>@errorMessage</p>
}
else if (allDungemon != null)
{
	<table class="table">

		<thead>
			<tr>
				<th scope="col">Name</th>
				<th scope="col">Challenge Rating</th>
				<th scope="col">Base Pokemon</th>
			</tr>
		</thead>

		<tbody>

			@foreach (var dungemon in allDungemon)
			{
				<tr style="cursor: pointer;" @onclick="() => HandleRowClick(dungemon.Id)">
					<td>@(string.IsNullOrEmpty(dungemon.NickName) ? dungemon.BasePokemon : dungemon.NickName)</td>
					<td>@dungemon.ChallengeRating</td>
					<td>@dungemon.BasePokemon</td>
				</tr>
			}

		</tbody>

	</table>
}

@code {
	public List<Dungemon> allDungemon { get; set; } = null!;

	private string errorMessage { get; set; } = null!;

	protected override async Task OnInitializedAsync()
	{
		try
		{
			using var client = clientFactory.CreateClient("BackendAPI");
			allDungemon = await client.GetFromJsonAsync<List<Dungemon>>("dungemon?number=10&offset=0")
				?? throw new Exception("Unable to convert the server response into Dungémon.");
		}
		catch (HttpRequestException ex)
		{
			errorMessage = ex.Message;
		}
		catch (Exception ex)
		{
			errorMessage = "An error occurred while fetching the Dungémon data: " + ex.Message;
		}
	}

	public void HandleRowClick(int id)
	{
		Nav.NavigateTo($"/dungemon/{id}", false);
	}
}
