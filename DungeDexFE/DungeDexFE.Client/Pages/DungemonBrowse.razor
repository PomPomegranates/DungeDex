@page "/dungemon"

@rendermode @(new InteractiveWebAssemblyRenderMode(false))

@inject IHttpClientFactory clientFactory
@inject NavigationManager Nav

<PageTitle>DungéDex : Browse</PageTitle>

<h3>Browse Dungémon</h3>

<div class="py-4">

	@if (!string.IsNullOrEmpty(errorMessage))
	{

		<p>@errorMessage</p>

	}
	else if (allDungemon is not null)
	{

		<div id="FilterBar">
			<EditForm Model="filter">
				<InputText @bind-Value="filter.PokeFilter" placeholder="Base Pokémon" />
				<button type="submit" @onclick="PopulateTable">Filter</button>
				<button hidden="@(string.IsNullOrEmpty(filter.PokeFilter))" @onclick="ClearFilter">❌</button>
			</EditForm>
		</div>


		<div class="py-4">
			<DungemonTable dungemonList="allDungemon"/>
		</div>


		<div class="py-4">
			<div style="width: 100%; display: flex; justify-content: space-between">


				<div>
					<button hidden="@(filter.Offset <= 0)" @onclick="() => filter.TurnPage(-1)">
						<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-left" viewBox="0 0 16 16">
							<path fill-rule="evenodd" d="M15 8a.5.5 0 0 0-.5-.5H2.707l3.147-3.146a.5.5 0 1 0-.708-.708l-4 4a.5.5 0 0 0 0 .708l4 4a.5.5 0 0 0 .708-.708L2.707 8.5H14.5A.5.5 0 0 0 15 8" />
						</svg> Previous
					</button>
				</div>


				<div>
					<button hidden="@(allDungemon.Count <= 20)" @onclick="() => filter.TurnPage(1)">
						Next <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-right" viewBox="0 0 16 16">
							<path fill-rule="evenodd" d="M1 8a.5.5 0 0 1 .5-.5h11.793l-3.147-3.146a.5.5 0 0 1 .708-.708l4 4a.5.5 0 0 1 0 .708l-4 4a.5.5 0 0 1-.708-.708L13.293 8.5H1.5A.5.5 0 0 1 1 8" />
						</svg>
					</button>
				</div>


			</div>
		</div>

	}
</div>

@code {
	public List<Dungemon> allDungemon { get; set; } = null!;

	public FilterModel filter { get; set; } = new();

	private string errorMessage { get; set; } = null!;

	protected override async Task OnInitializedAsync()
	{
		await PopulateTable();
	}

	private async Task ClearFilter()
	{
		filter.Reset();
		await PopulateTable();
	}

	private async Task PopulateTable()
	{
		var queryString = filter.GetQueryString();

		try
		{
			using var client = clientFactory.CreateClient("BackendAPI");
			allDungemon = await client.GetFromJsonAsync<List<Dungemon>>($"dungemon{queryString}")
				?? throw new Exception("Unable to convert the server response into Dungémon.");
		}
		catch (HttpRequestException ex)
		{
			errorMessage = ex.Message;
		}
		catch (Exception ex)
		{
			errorMessage = "An error occurred while fetching the Dungémon data: " + ex.Message;
		}
	}

	private async Task TurnPage(int value)
	{
		if ((value == -1 && filter.Offset <= 0) || (value == 1 && allDungemon.Count < 20)) return;
		filter.TurnPage(value);
		await PopulateTable();
	}

	public class FilterModel
	{
		public string? PokeFilter { get; set; } = null!;
		public int Offset { get; set; } = 0;
		public int Number { get; set; } = 20;

		public string GetQueryString()
		{
			return string.IsNullOrEmpty(PokeFilter)
				? $"?number={Number}&offset={Offset}"
				: $"?number={Number}&offset={Offset}&basePokemon={PokeFilter}";
		}

		public void Reset()
		{
			PokeFilter = null;
		}

		public void TurnPage(int value)
		{
			Offset += value * 20;
		}
	}
}
