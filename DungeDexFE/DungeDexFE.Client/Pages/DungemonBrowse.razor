@page "/dungemon"

@rendermode @(new InteractiveWebAssemblyRenderMode(false))

@inject IHttpClientFactory clientFactory
@inject NavigationManager Nav

<PageTitle>DungéDex : Browse</PageTitle>

<h3>Browse Dungémon</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
	<p>@errorMessage</p>
}
else if (allDungemon != null)
{
	<div id="FilterBar">
		<InputText @bind-Value="pokeFilter" placeholder="Pokémon" />
		<button @onclick="PopulateTable">Filter By Pokémon</button>
		<button hidden=@filterEmpty @onclick="WipeFilter">❌</button>
	</div>
	<DungemonTable dungemonList="allDungemon" />
	<button hidden=@atStart @onclick="PreviousPage">⬅️ Previous</button>
	<button hidden=@lessThan20 @onclick="NextPage">Next ➡️</button>
}

@code {
	public List<Dungemon> allDungemon { get; set; } = null!;

	private string errorMessage { get; set; } = null!;

	private int currentOffset = 0;

	private bool atStart = true;

	private bool lessThan20 = true;

	private string pokeFilter = string.Empty;

	private bool filterEmpty = true;

	private bool initialisedFilter = true;

	protected override async Task OnInitializedAsync()
	{
		await PopulateTable();
	}

	private async Task NextPage(MouseEventArgs e)
	{
		currentOffset += 20;
		atStart = false;
		await PopulateTable();
	}

	private async Task PreviousPage(MouseEventArgs e)
	{
		currentOffset -= 20;
		if (currentOffset == 0)
		{
			atStart = true;
		}
		await PopulateTable();
	}

	private async Task PopulateTable()
	{
		if (!String.IsNullOrEmpty(pokeFilter)) filterEmpty = false; else filterEmpty = true;
		try
		{
			using var client = clientFactory.CreateClient("BackendAPI");
			allDungemon = await client.GetFromJsonAsync<List<Dungemon>>($"dungemon?number=20&offset={currentOffset}")
				?? throw new Exception("Unable to convert the server response into Dungémon.");
		}
		catch (HttpRequestException ex)
		{
			errorMessage = ex.Message;
		}
		catch (Exception ex)
		{
			errorMessage = "An error occurred while fetching the Dungémon data: " + ex.Message;
		}
	}
	private async Task WipeFilter()
	{
		pokeFilter = String.Empty;
		initialisedFilter = true;
		await PopulateTable();
	}
}
