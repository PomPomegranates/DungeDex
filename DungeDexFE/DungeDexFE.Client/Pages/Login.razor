@page "/login"
@using System.Security.Claims
@inject AuthenticationStateProvider auth
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

@rendermode @(new InteractiveWebAssemblyRenderMode(false))

@if (!string.IsNullOrEmpty(username))
{
	<p>Welcome, @username!</p>
}
else
{
	<p>@message</p>
}

@if (username is null)
{
	<EditForm Model="@loginModel" Context="LoginForm">
		<InputText @bind-Value="loginModel.UserName" placeholder="Username" />
		<InputText type="password" @bind-Value="loginModel.Password" placeholder="Password" />
		<button type="submit" @onclick="SignIn">Sign In!</button>
	</EditForm>
}
else
{
	<button @onclick="SignOut">Sign Out!</button>
}

@if (!string.IsNullOrEmpty(loginErrorMessage))
{
	<p>@loginErrorMessage</p>
}

@code {
	public LoginModel loginModel = new();
	public string? username = null;
	private string? message = "You are not logged in.";
	private string? loginErrorMessage = null;
	private AuthenticationState authState = null!;

	protected override async Task OnInitializedAsync()
	{
		authState = await auth.GetAuthenticationStateAsync();

		if (authState?.User?.Identity?.IsAuthenticated == true)
		{
			username = authState.User.Identity.Name;
			return;
		}

		var token = await sessionStorage.GetItemAsStringAsync("Jwt");
		if (token is null) return;

		using var client = new HttpClient();
		client.DefaultRequestHeaders.Add("Authorization", $"Bearer {token}");

		var result = await client.GetFromJsonAsync<LoginModel>("https://localhost:7298/api/authentication/CurrentUser");
		if (result == null) return;

		username = result.UserName;
	}

	private async Task SignIn()
	{
		using var client = new HttpClient();
		var result = await client.PostAsJsonAsync<LoginModel>("https://localhost:7298/api/authentication/login", loginModel);

		if (!result.IsSuccessStatusCode)
		{
			loginErrorMessage = "Incorrect credentials provided.";
			ClearLoginModel();
			return;
		}

		var jwt = await result.Content.ReadFromJsonAsync<Jwt>();
		if (jwt is null) return;

		await sessionStorage.SetItemAsStringAsync("Jwt", jwt.Token);
		var claim = new Claim(ClaimTypes.Name, loginModel.UserName);
		var identity = new ClaimsIdentity(new[] { claim });
		var user = new ClaimsPrincipal(identity);
		authState = new AuthenticationState(user);

		username = loginModel.UserName;
		ClearLoginModel();
	}

	private async void SignOut(MouseEventArgs e)
	{
		await sessionStorage.RemoveItemAsync("Jwt");
		username = null;
		ClearLoginModel();
		StateHasChanged();
	}

	public class LoginModel
	{
		public string UserName { get; set; } = null!;
		public string Password { get; set; } = null!;
	}

	public class Jwt
	{
		public string Token { get; set; } = null!;
	}

	private void ClearLoginModel()
	{
		loginModel = new();
	}
}
