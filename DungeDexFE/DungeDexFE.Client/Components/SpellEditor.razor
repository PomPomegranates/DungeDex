<h3>Spells</h3>

@foreach (var spell in _spells)
{
	<SpellDisplay Spell="spell" IsEditing="IsEditing" SpellDeleted="DeleteSpell" SpellChanged="ChangeSpell" />
	<br />
	<br />
}


@if (IsEditing)
{
	@if (isAddingSpell)
	{
		<SpellLoader AddSpell="AddSpell" />
	}
	else
	{
		<button @onclick="ToggleAddSpell">
			<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-plus-square" viewBox="0 0 16 16">
				<path d="M14 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2z" />
				<path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4" />
			</svg> New Spell
		</button>
	}

	<button @onclick="SaveSpells" class="btn btn-success">
		<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-plus-square" viewBox="0 0 16 16">
			<path d="M14 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2z" />
			<path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4" />
		</svg> Save Spells
	</button>
}


@code {
	[Parameter, EditorRequired]
	public Dungemon Dungemon { get; set; } = null!;

	[Parameter, EditorRequired]
	public bool IsEditing { get; set; }

	[Parameter, EditorRequired]
	public EventCallback<Dungemon> DungemonChanged { get; set; }

	private List<Spell> _spells = [];

	private bool isAddingSpell = false;

	protected override void OnParametersSet()
	{
		_spells = Dungemon.Spells.Select(s => s.Clone(Dungemon.Id)).ToList();
	}

	public void DeleteSpell(Spell spell)
	{
		_spells.Remove(spell);
	}

	public void ChangeSpell((Spell original, Spell updated) spell)
	{
		var spellIndex = _spells.IndexOf(spell.original);
		_spells[spellIndex] = spell.updated;
	}

	public void ToggleAddSpell()
	{
		isAddingSpell = !isAddingSpell;
	}

	private void AddSpell(Spell? spell)
	{
		if (spell is not null)
		{
			spell.DungemonId = Dungemon.Id;
			_spells.Add(spell);
		}

		ToggleAddSpell();
	}

	private async Task SaveSpells(MouseEventArgs e)
	{
		await DungemonChanged.InvokeAsync(Dungemon);
	}
}
