@using System.Text.Json;
@using System.Linq.Expressions
@using DungeDexFE.Client.Components.DungemonEditingComponents
@using System.Security.Claims
@using System.Net

@inject AuthStateProvider auth

<EditForm model=@Dungemon OnInvalidSubmit=@InvalidFormSubmitted OnValidSubmit=@ValidFormSubmitted>
    <DataAnnotationsValidator />

    <div class="gridContainer im-fell-great-primer-regular" style="background-color:rgba(230,206,158,0); border: 5px outset grey; border-radius: 2rem;  ">

        <div class="LeftSide">
            <div class="TopPart">
                <TypeEditor Dungemon="Dungemon" IsEditing="_isEditing" DungemonChanged="DungemonChanged" />
                <ChallengeRatingEditor  Dungemon="Dungemon" IsEditing="_isEditing" />
                <NicknameEditor  Dungemon="Dungemon" DungemonChanged="DungemonChanged" />
                <HitPointsEditor  Dungemon="Dungemon" IsEditing="_isEditing" />
            </div>

            <div class="PokemonImage">
                <DungemonImage Dungemon="Dungemon" IsSilent="isSilent"/>
                <button type="button" @onclick="ChangeAudio">@(isSilent ? "Unmute Audio!" : "Mute Audo!")</button>
            </div>

            <div class="attributes">
                <AttributesEditor Dungemon="Dungemon" IsEditing="_isEditing" />
            </div>

            <div class="actions">
                <ActionsEditor Attacks="Dungemon.Actions" IsEditing="_isEditing" AttacksChanged="AttacksChanged"/> 
            </div>
        </div>

        <div class="RightSide">
            <SpellEditor Spells="Dungemon.Spells" SpellsChanged="SpellsChanged" />
            <ProficienciesEditor Dungemon="Dungemon" IsEditing="_isEditing" />
            <br/>
            <DescriptionEditor Dungemon="Dungemon" IsEditing ="_isEditing"/>
        </div>
    </div>

    <div class="grid-item" spaceId="25">

        @if (isUsersDungemon)
        {
            @if (_isEditing)
            {
                <button type="button" class="btn-primary" value="Save!" style="width: 100%;" @onclick="HandleButtonClick">Save!</button>
            }
            else
            {
                <button type="button" class="btn-primary" value="Save!" style="width: 100%;" @onclick="HandleButtonClick">Edit this Dungémon!</button>
            }
        }

    </div>

    <div class="grid-item" spaceId="submit">@_submitResult</div>

</EditForm>

@code 
{
    [Parameter]
    public Dungemon Dungemon { get; set; } = null!;

    [Parameter]
    public EventCallback<Dungemon> DungemonChanged { get; set; }

    private bool _isEditing { get; set; } = false;

    private bool isUsersDungemon { get; set; } = false;

    private string _submitResult { get; set; } = null!;

    private bool isSilent { get; set; } = false;


    private void ChangeAudio()
    {
        isSilent = !isSilent;
    }

    protected override async Task OnParametersSetAsync()
    {
        await auth.GetAuthenticationStateAsync();
        var userId = auth.GetUserId();

        isUsersDungemon = !string.IsNullOrEmpty(userId) && userId == Dungemon.UserId;
    }

    private async Task AttacksChanged(List<MonsterAction> attacks)
    {
        Dungemon.Actions = attacks;
        await DungemonChanged.InvokeAsync(Dungemon);
    }

    private async Task SpellsChanged(List<Spell> spells)
    {
        Dungemon.Spells = spells;
        await DungemonChanged.InvokeAsync(Dungemon);
    }

    private async Task HandleButtonClick(MouseEventArgs e)
    {
        if (!_isEditing)
        {
            _isEditing = true;
            return;
        }

        _isEditing = false;
        await DungemonChanged.InvokeAsync(Dungemon);
    }

    public async Task ValidFormSubmitted(EditContext editContext)
    {
        await DungemonChanged.InvokeAsync(Dungemon);

        _submitResult = "Dungémon updated!";

        _isEditing = false;
    }

    public void InvalidFormSubmitted(EditContext editContext)
    {
        _submitResult = "Please enter valid values.";
    }
}
