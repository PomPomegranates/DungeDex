@using System.Text.Json;
@using System.Linq.Expressions
@using DungeDexFE.Client.Components.DungemonEditingComponents
@using System.Security.Claims
@using System.Net
@inject AuthStateProvider auth


<EditForm model=@Dungemon OnInvalidSubmit=@InvalidFormSubmitted OnValidSubmit=@ValidFormSubmitted>
    <DataAnnotationsValidator />

    <div class="gridContainer" style="background-color:rgba(230,206,158,0); border: 5px outset grey; border-radius: 2rem; position:relative "  >


        <div class="LeftSide">

            <div class="TopPart">
                <ChallengeRatingEditor  Dungemon="Dungemon" IsEditing="_isEditing" />
                <NicknameEditor  Dungemon="Dungemon" DungemonChanged="DungemonChanged" />
                <HitPointsEditor  Dungemon="Dungemon" IsEditing="_isEditing" />

            </div>



            <div class="PokemonImage">
                <DungemonImage Dungemon="Dungemon" IsSilent="isSilent"/>
                @if(!isSilent){
                    <button type="button" @onclick="ChangeAudio"> Mute Audio!</button>
                }else{
                    <button type="button" @onclick="ChangeAudio"> Unmute Audio!</button>
                }
                
            </div>


            <div class="attributes">
                <AttributesEditor Dungemon="Dungemon" IsEditing="_isEditing" />

            </div>
            <div class="actions">
                <ActionsEditor Attacks="Dungemon.Actions" IsEditing="_isEditing" AttacksChanged="AttacksChanged"/> 
                
            </div>

        </div>
        <div class="RightSide">

            <SpellEditor Spells="Dungemon.Spells" SpellsChanged="SpellsChanged" />
            

            <ProficienciesEditor Dungemon="Dungemon" IsEditing="_isEditing" />

            <br/>
            <DescriptionEditor Dungemon="Dungemon" IsEditing ="_isEditing"/>

        </div>
    </div>

    <div class="grid-item" spaceId="25">
        @if (_isEditing)
        {
            <input type="submit" class="btn-primary" value="Save!" style="width: 100%;" />
        }
        else
        {
            <button type="button" disabled="@(!signedIn)" class="btn-primary" style="width: 100%;" @onclick="HandleButtonClick">@buttonMessage</button>
        }
    </div>
    <div class="grid-item" spaceId="submit">@_submitResult</div>



</EditForm>

@code {
    
    [Parameter]
    public Dungemon Dungemon { get; set; } = null!;

    [Parameter]
    public EventCallback<Dungemon> DungemonChanged { get; set; }

    private bool _isEditing { get; set; } = false;

    private string _submitResult = null!;

    private bool isSilent = false;


    private void ChangeAudio(){
        isSilent = !isSilent;
    }

    private void AttacksChanged(List<MonsterAction> attacks){
        Dungemon.Actions = attacks;
        DungemonChanged.InvokeAsync(Dungemon);

    private bool signedIn = false;

    private string buttonMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var authState = await auth.GetAuthenticationStateAsync();

        if (String.IsNullOrEmpty(auth.GetUserId()))
        {
            signedIn = false;
            buttonMessage = "Sign in to Edit.";
            return;
        }
        else
        {
            signedIn = true;
            buttonMessage = "Edit this Dungémon!";
        }

    }

    private void SpellsChanged(List<Spell> spells)
    {
        Dungemon.Spells = spells;
        DungemonChanged.InvokeAsync(Dungemon);
    }
    private void HandleButtonClick(MouseEventArgs e)
    {
        _isEditing = true;
    }

    public async Task ValidFormSubmitted(EditContext editContext)
    {
    await DungemonChanged.InvokeAsync(Dungemon);

    _submitResult = "Dungémon updated!";

    _isEditing = false;
    }

    public void InvalidFormSubmitted(EditContext editContext)
    {
    _submitResult = "Please enter valid values.";
    }
}