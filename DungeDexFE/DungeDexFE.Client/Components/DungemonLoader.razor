@rendermode InteractiveAuto

@using System.Text.Json

@if(!string.IsNullOrEmpty(errorMessage))
{
    <p>An error occurred while fetching the Dungémon data for '@idOrName':</p>
    <p>@errorMessage</p>    
}
else if (dungemonster != null)
{
    @if(!isEditing){

        <DungemonDisplay Monster="@dungemonster" />
        <button @onclick="()=>isEditing=true">I want to edit this Dungémon!</button>
    } else{
        <DungemonEditor Monster="@dungemonster" />
    }


}

@code {
    [Parameter]
    public string idOrName { get; set; } = null!;

    public bool isEditing { get; set; } = false;

    public Dungemon? dungemonster { get; set; } = null!;

    private string errorMessage { get; set; } = null!;

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            using var client = new HttpClient();
            client.DefaultRequestHeaders.Add("Access-Control-Allow-Origin", "https://localhost:7107/");
            var response = await client.GetAsync($"https://localhost:7298/api/Pokemon/{idOrName}/monsterify");
            response.EnsureSuccessStatusCode();
            dungemonster = await response.Content.ReadFromJsonAsync<Dungemon>();
        }
        catch (HttpRequestException ex)
        {
            errorMessage = ex.Message;
        }
        catch
        {
            errorMessage = "Could not process the Pokémonster data. Please try again later.";
        }
    }
}
