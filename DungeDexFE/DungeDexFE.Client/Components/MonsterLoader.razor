@rendermode InteractiveAuto

@using System.Text.Json

@if(string.IsNullOrEmpty(errorMessage))
{
    @if (monster != null)
    {
        <MonsterDisplay Monster="@monster" />
    }
}
else
{
    <p>An error occurred while fetching the Pokémonster data for '@idOrName':</p>
    <p>@errorMessage</p>
}

@code {
    [Parameter]
    public string idOrName { get; set; } = null!;

    public Monster? monster { get; set; } = null!;

    private string errorMessage { get; set; } = null!;

    protected override async Task OnParametersSetAsync()
    {
        await GetMonster();
    }

    public async Task GetMonster()
    {
        try
        {
            using var client = new HttpClient();
            client.DefaultRequestHeaders.Add("Access-Control-Allow-Origin", "https://localhost:7107/");
            var response = await client.GetAsync($"https://localhost:7298/api/Pokemon/{idOrName}/monsterify");
            response.EnsureSuccessStatusCode();
            monster = await response.Content.ReadFromJsonAsync<Monster>();
        }
        catch (HttpRequestException ex)
        {
            errorMessage = ex.Message;
        }
        catch
        {
            errorMessage = "Could not process the Pokémonster data. Please try again later.";
        }
    }
}
