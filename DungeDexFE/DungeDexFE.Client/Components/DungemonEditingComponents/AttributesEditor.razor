<div class="grid-container">

	<div class="grid-item" spaceId="Str-Label">
		<label for="STR">STR</label>
	</div>
	<div class="grid-item" spaceId="Str-Id">
		<InputNumber id="STR" TValue="int" style="width: 50px; text-align: center; border: none;" class="inputNum"
			@bind-Value="@Dungemon.Strength" 
			@onblur="AttributesChanged"
			disabled="@(!IsEditing)"  />
	</div>
	<div class="grid-item" spaceID="Str-Mod">
		<p>@GetModifier(Dungemon.Strength)</p>
	</div>
	<div class="grid-item" spaceId="Str-Warn">
		<ValidationMessage For="() => Dungemon.Strength" />
	</div>



	<div class="grid-item text-center" spaceId="Dex-Label">
		<label for="DEX">DEX</label>
	</div>
	<div class="grid-item" spaceId="Dex-Id">
		<InputNumber id="DEX" TValue="int" style="width: 50px; text-align: center; border: none;" class="inputNum" 
			@bind-Value="@Dungemon.Dexterity"
			@onblur="AttributesChanged"
			disabled="@(!IsEditing)" />
	</div>
	<div class="grid-item" spaceID="Dex-Mod">
		<p>@GetModifier(Dungemon.Dexterity)</p>
	</div>
	<div class="grid-item text-center" spaceId="Dex-Warn">
		<ValidationMessage For="() => Dungemon.Dexterity" />
	</div>



	<div class="grid-item  text-center" spaceId="Con-Label">
		<label for="CON">CON</label>
	</div>
	<div class="grid-item" spaceId="Con-Id">
		<InputNumber id="CON" TValue="int" style="width: 50px; text-align: center; border: none;" class="inputNum"
			@bind-Value="@Dungemon.Constitution" 
			@onblur="AttributesChanged"
			disabled="@(!IsEditing)" />
	</div>
	<div class="grid-item" spaceID="Con-Mod">
		<p>@GetModifier(Dungemon.Constitution)</p>
	</div>
	<div class="grid-item text-center" spaceId="Con-Warn">
		<ValidationMessage For="() => Dungemon.Constitution" />
	</div>



	<div class="grid-item text-center" spaceId="Int-Label">
		<label for="INT">INT</label>
	</div>
	<div class="grid-item" spaceId="Int-Id">
		<InputNumber id="INT" TValue="int" style="width: 50px; text-align: center; border: none;" class="inputNum" 
			@bind-Value="@Dungemon.Intelligence" 
			@onblur="AttributesChanged"
			disabled="@(!IsEditing)" />
	</div>
	<div class="grid-item" spaceID="Int-Mod">
		<p>@GetModifier(Dungemon.Intelligence)</p>
	</div>
	<div class="grid-item text-center" spaceId="Int-Warn">
		<ValidationMessage For="() => Dungemon.Intelligence" />
	</div>



	<div class="grid-item text-center" spaceId="Wis-Label">
		<label for="WIS">WIS</label>
	</div>
	<div class="grid-item " spaceId="Wis-Id">
		<InputNumber id="WIS" TValue="int" style="width: 50px; text-align: center; border: none;" class="inputNum"
			@bind-Value="@Dungemon.Wisdom" 
			@onblur="AttributesChanged"
			disabled="@(!IsEditing)" />
	</div>
	<div class="grid-item" spaceID="Wis-Mod">
		<p>@GetModifier(Dungemon.Wisdom)</p>
	</div>
	<div class="grid-item text-center" spaceId="Wis-Warn">
		<ValidationMessage For="() => Dungemon.Wisdom" />
	</div>



	<div class="grid-item text-center " spaceId="Cha-Label">
		<label for="CHA">CHA</label>
	</div>
	<div class="grid-item" spaceId="Cha-Id" >
		<InputNumber id="CHA" TValue="int" style="width: 50px; text-align: center; border: none;" class="inputNum"
			@bind-Value="@Dungemon.Charisma" 
			@onblur="AttributesChanged"
			disabled="@(!IsEditing)" />
	</div>
	<div class="grid-item" spaceID="Cha-Mod">
		<p>@GetModifier(Dungemon.Charisma)</p>
	</div>
	<div class="grid-item text-center" spaceId="Cha-Warn">
		<ValidationMessage For="() => Dungemon.Charisma" />
	</div>

</div>

@code 
{
	[Parameter, EditorRequired]
	public Dungemon Dungemon { get; set; } = null!;

	[Parameter, EditorRequired]
	public bool IsEditing { get; set; }

	[Parameter, EditorRequired]
	public EventCallback<Dungemon> DungemonChanged { get; set; }

	public float modd;

	public string GetModifier(int mod)
	{
		modd = mod;
		modd = MathF.Floor((mod - 10 )/ 2);

		if (mod > 10) return $"+{modd}";

		if(mod < 10) return $"{modd}";

		return "+0";
	}

	private async Task AttributesChanged()
	{
		await DungemonChanged.InvokeAsync(Dungemon);
	}
}

