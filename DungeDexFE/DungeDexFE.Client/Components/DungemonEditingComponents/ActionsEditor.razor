<h3>Actions</h3>

@foreach (var action in LocalActions)
{
	<ActionsDisplay Action="action" IsEditing="IsEditing" ActionDeleted="DeleteAction" ActionChanged="ChangeAction"/>
	<br />
	<br />
}

@if (IsEditing)
{
	<button id="addingAction" @onclick="AddNewAction">
		<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-plus-square" viewBox="0 0 16 16">
			<path d="M14 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2z" />
			<path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4" />
		</svg> New Action
	</button>

	<button @onclick="SaveActions" class="btn btn-success"> 
		<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-plus-square" viewBox="0 0 16 16"> 
			<path d="M14 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2z" /> 
			<path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4" /> 
		</svg> Save Actions
	</button>
}


@code 
{
	[Parameter, EditorRequired]
	public Dungemon Dungemon { get; set; } = null!;

	[Parameter, EditorRequired]
	public bool IsEditing { get; set; }

	[Parameter, EditorRequired]
	public EventCallback<List<MonsterAction>> ActionsChanged { get; set; }

	private List<MonsterAction> LocalActions = [];

	private readonly Random _rand = new Random();

	protected override void OnParametersSet()
	{
		LocalActions = Dungemon.Actions.Select(a => a.Clone(Dungemon.Id)).ToList();
		base.OnParametersSet();
	}

	public void AddNewAction(MouseEventArgs e)
	{
		var currentIds = Dungemon.Actions.Select(a => a.Id).ToList();

		int tempId = _rand.Next();
		while (currentIds.Contains(tempId))
		{
			tempId = _rand.Next();
		}

		var action = new MonsterAction()
		{
			Id = tempId,
			DungemonId = Dungemon.Id
		};
		LocalActions.Add(action);
	}

	public void DeleteAction(MonsterAction action)
	{
		var actionToDelete = LocalActions.First(a => a.Id == action.Id);
		LocalActions.Remove(actionToDelete);
	}

	public void ChangeAction(MonsterAction action)
	{
		var index = LocalActions.IndexOf(action);
		LocalActions[index] = action;
	}

	public void SaveActions(MouseEventArgs e)
	{
		ActionsChanged.InvokeAsync(LocalActions);
	}
}
